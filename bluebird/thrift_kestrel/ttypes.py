#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style:utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Status:
  NOT_CONFIGURED = 0
  QUIESCENT = 1
  READ_ONLY = 2
  UP = 3

  _VALUES_TO_NAMES = {
    0: "NOT_CONFIGURED",
    1: "QUIESCENT",
    2: "READ_ONLY",
    3: "UP",
  }

  _NAMES_TO_VALUES = {
    "NOT_CONFIGURED": 0,
    "QUIESCENT": 1,
    "READ_ONLY": 2,
    "UP": 3,
  }


class Item:
  """
  Attributes:
   - data
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'data', None, None, ), # 1
    (2, TType.I64, 'id', None, None, ), # 2
  )

  def __init__(self, data=None, id=None,):
    self.data = data
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Item')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 1)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 2)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueueInfo:
  """
  Attributes:
   - head_item
   - items
   - bytes
   - journal_bytes
   - age
   - waiters
   - open_transactions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'head_item', None, None, ), # 1
    (2, TType.I64, 'items', None, None, ), # 2
    (3, TType.I64, 'bytes', None, None, ), # 3
    (4, TType.I64, 'journal_bytes', None, None, ), # 4
    (5, TType.I64, 'age', None, None, ), # 5
    (6, TType.I32, 'waiters', None, None, ), # 6
    (7, TType.I32, 'open_transactions', None, None, ), # 7
  )

  def __init__(self, head_item=None, items=None, bytes=None, journal_bytes=None, age=None, waiters=None, open_transactions=None,):
    self.head_item = head_item
    self.items = items
    self.bytes = bytes
    self.journal_bytes = journal_bytes
    self.age = age
    self.waiters = waiters
    self.open_transactions = open_transactions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.head_item = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.items = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.journal_bytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.age = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.waiters = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.open_transactions = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueueInfo')
    if self.head_item is not None:
      oprot.writeFieldBegin('head_item', TType.STRING, 1)
      oprot.writeString(self.head_item)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.I64, 2)
      oprot.writeI64(self.items)
      oprot.writeFieldEnd()
    if self.bytes is not None:
      oprot.writeFieldBegin('bytes', TType.I64, 3)
      oprot.writeI64(self.bytes)
      oprot.writeFieldEnd()
    if self.journal_bytes is not None:
      oprot.writeFieldBegin('journal_bytes', TType.I64, 4)
      oprot.writeI64(self.journal_bytes)
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.I64, 5)
      oprot.writeI64(self.age)
      oprot.writeFieldEnd()
    if self.waiters is not None:
      oprot.writeFieldBegin('waiters', TType.I32, 6)
      oprot.writeI32(self.waiters)
      oprot.writeFieldEnd()
    if self.open_transactions is not None:
      oprot.writeFieldBegin('open_transactions', TType.I32, 7)
      oprot.writeI32(self.open_transactions)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

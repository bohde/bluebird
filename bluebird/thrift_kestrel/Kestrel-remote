#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style:utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Kestrel
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 put(string queue_name,  items, i32 expiration_msec)'
  print '   get(string queue_name, i32 max_items, i32 timeout_msec, i32 auto_abort_msec)'
  print '  i32 confirm(string queue_name,  ids)'
  print '  i32 abort(string queue_name,  ids)'
  print '  QueueInfo peek(string queue_name)'
  print '  void flush_queue(string queue_name)'
  print '  void flush_all_queues()'
  print '  void delete_queue(string queue_name)'
  print '  Status current_status()'
  print '  void set_status(Status status)'
  print '  string get_version()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Kestrel.Client(protocol)
transport.open()

if cmd == 'put':
  if len(args) != 3:
    print 'put requires 3 args'
    sys.exit(1)
  pp.pprint(client.put(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'get':
  if len(args) != 4:
    print 'get requires 4 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'confirm':
  if len(args) != 2:
    print 'confirm requires 2 args'
    sys.exit(1)
  pp.pprint(client.confirm(args[0],eval(args[1]),))

elif cmd == 'abort':
  if len(args) != 2:
    print 'abort requires 2 args'
    sys.exit(1)
  pp.pprint(client.abort(args[0],eval(args[1]),))

elif cmd == 'peek':
  if len(args) != 1:
    print 'peek requires 1 args'
    sys.exit(1)
  pp.pprint(client.peek(args[0],))

elif cmd == 'flush_queue':
  if len(args) != 1:
    print 'flush_queue requires 1 args'
    sys.exit(1)
  pp.pprint(client.flush_queue(args[0],))

elif cmd == 'flush_all_queues':
  if len(args) != 0:
    print 'flush_all_queues requires 0 args'
    sys.exit(1)
  pp.pprint(client.flush_all_queues())

elif cmd == 'delete_queue':
  if len(args) != 1:
    print 'delete_queue requires 1 args'
    sys.exit(1)
  pp.pprint(client.delete_queue(args[0],))

elif cmd == 'current_status':
  if len(args) != 0:
    print 'current_status requires 0 args'
    sys.exit(1)
  pp.pprint(client.current_status())

elif cmd == 'set_status':
  if len(args) != 1:
    print 'set_status requires 1 args'
    sys.exit(1)
  pp.pprint(client.set_status(eval(args[0]),))

elif cmd == 'get_version':
  if len(args) != 0:
    print 'get_version requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_version())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
